syntax = "proto3";

package neurodefender.events;

option go_package = "neurodefender/proto/events";
option java_package = "com.neurodefender.proto.events";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

// Event Service handles event collection, processing, and management across
// all Neurodefender components
service EventService {
    // Single event ingestion
    rpc IngestEvent(Event) returns (EventResponse);
    
    // Batch event ingestion
    rpc IngestEvents(EventBatch) returns (BatchResponse);
    
    // Streaming event ingestion
    rpc IngestEventStream(stream Event) returns (stream EventResponse);
    
    // Event subscription with filtering
    rpc SubscribeEvents(EventSubscriptionRequest) returns (stream Event);
    
    // Event querying
    rpc QueryEvents(EventQuery) returns (EventQueryResponse);
    
    // Event aggregation
    rpc AggregateEvents(AggregationRequest) returns (AggregationResponse);
    
    // Event enrichment
    rpc EnrichEvents(EnrichmentRequest) returns (EnrichmentResponse);
    
    // Event correlation
    rpc CorrelateEvents(CorrelationRequest) returns (CorrelationResponse);
}

// Core event messages
message Event {
    string event_id = 1;
    EventType type = 2;
    google.protobuf.Timestamp timestamp = 3;
    EventSource source = 4;
    Severity severity = 5;
    repeated string categories = 6;
    string message = 7;
    map<string, string> metadata = 8;
    bytes payload = 9;
    EventEnrichment enrichment = 10;
}

message EventBatch {
    repeated Event events = 1;
    string batch_id = 2;
    BatchOptions options = 3;
}

message EventResponse {
    string event_id = 1;
    EventStatus status = 2;
    string error_message = 3;
    google.protobuf.Timestamp processed_at = 4;
}

message BatchResponse {
    string batch_id = 1;
    uint32 total_events = 2;
    uint32 success_count = 3;
    uint32 failure_count = 4;
    repeated EventError errors = 5;
    google.protobuf.Duration processing_time = 6;
}

// Event source and metadata
message EventSource {
    string name = 1;
    string type = 2;
    string ip = 3;
    string hostname = 4;
    map<string, string> attributes = 5;
    AssetInfo asset = 6;
}

message AssetInfo {
    string asset_id = 1;
    string name = 2;
    AssetType type = 3;
    string owner = 4;
    AssetCriticality criticality = 5;
    repeated string tags = 6;
    map<string, string> metadata = 7;
}

message EventError {
    string event_id = 1;
    ErrorCode code = 2;
    string message = 3;
    map<string, string> details = 4;
}

// Subscription messages
message EventSubscriptionRequest {
    EventFilter filter = 1;
    SubscriptionOptions options = 2;
}

message EventFilter {
    repeated EventType types = 1;
    repeated string sources = 2;
    repeated Severity severities = 3;
    repeated string categories = 4;
    TimeRange time_range = 5;
    string query = 6;
}

message SubscriptionOptions {
    bool include_enrichment = 1;
    uint32 buffer_size = 2;
    google.protobuf.Duration timeout = 3;
    RetentionPolicy retention = 4;
}

// Query messages
message EventQuery {
    EventFilter filter = 1;
    QueryOptions options = 2;
    Pagination pagination = 3;
    repeated SortOrder sort = 4;
}

message QueryOptions {
    bool include_metadata = 1;
    bool include_enrichment = 2;
    bool include_payload = 3;
    AggregationConfig aggregation = 4;
}

message EventQueryResponse {
    repeated Event events = 1;
    uint32 total_count = 2;
    PageInfo page_info = 3;
    AggregationResults aggregations = 4;
}

// Aggregation messages
message AggregationRequest {
    EventFilter filter = 1;
    repeated AggregationConfig aggregations = 2;
    TimeRange time_range = 3;
}

message AggregationConfig {
    string field = 1;
    AggregationType type = 2;
    uint32 size = 3;
    map<string, string> parameters = 4;
}

message AggregationResponse {
    repeated AggregationResult results = 1;
    TimeRange time_range = 2;
    uint32 total_events = 3;
}

message AggregationResult {
    string field = 1;
    AggregationType type = 2;
    repeated Bucket buckets = 3;
    Stats stats = 4;
}

// Enrichment messages
message EnrichmentRequest {
    repeated Event events = 1;
    repeated EnrichmentType types = 2;
    EnrichmentOptions options = 3;
}

message EnrichmentOptions {
    bool async = 1;
    google.protobuf.Duration timeout = 2;
    bool cache_results = 3;
    map<string, string> parameters = 4;
}

message EnrichmentResponse {
    repeated EnrichedEvent events = 1;
    EnrichmentStats stats = 2;
}

message EnrichedEvent {
    string event_id = 1;
    EventEnrichment enrichment = 2;
    EnrichmentStatus status = 3;
    string error_message = 4;
}

// Correlation messages
message CorrelationRequest {
    repeated Event events = 1;
    CorrelationConfig config = 2;
    TimeWindow window = 3;
}

message CorrelationConfig {
    repeated CorrelationRule rules = 1;
    uint32 max_matches = 2;
    double threshold = 3;
    map<string, string> parameters = 4;
}

message CorrelationResponse {
    repeated CorrelationResult results = 1;
    CorrelationStats stats = 2;
}

// Common types
message TimeRange {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

message TimeWindow {
    google.protobuf.Duration duration = 1;
    WindowType type = 2;
}

message PageInfo {
    string next_cursor = 1;
    bool has_more = 2;
}

message SortOrder {
    string field = 1;
    Direction direction = 2;
}

message Bucket {
    string key = 1;
    uint64 doc_count = 2;
    map<string, double> values = 3;
}

message Stats {
    double min = 1;
    double max = 2;
    double avg = 3;
    double sum = 4;
    uint64 count = 5;
}

// Enums
enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    SECURITY = 1;
    AUDIT = 2;
    SYSTEM = 3;
    NETWORK = 4;
    APPLICATION = 5;
    CUSTOM = 6;
}

enum Severity {
    SEVERITY_UNSPECIFIED = 0;
    CRITICAL = 1;
    HIGH = 2;
    MEDIUM = 3;
    LOW = 4;
    INFO = 5;
}

enum AssetType {
    ASSET_TYPE_UNSPECIFIED = 0;
    SERVER = 1;
    WORKSTATION = 2;
    NETWORK_DEVICE = 3;
    SECURITY_DEVICE = 4;
    CONTAINER = 5;
    CLOUD_RESOURCE = 6;
}

enum AssetCriticality {
    CRITICALITY_UNSPECIFIED = 0;
    MISSION_CRITICAL = 1;
    BUSINESS_CRITICAL = 2;
    OPERATIONAL = 3;
    SUPPORT = 4;
}

enum AggregationType {
    AGGREGATION_TYPE_UNSPECIFIED = 0;
    COUNT = 1;
    SUM = 2;
    AVG = 3;
    MIN = 4;
    MAX = 5;
    CARDINALITY = 6;
    TERMS = 7;
}

enum EnrichmentType {
    ENRICHMENT_TYPE_UNSPECIFIED = 0;
    THREAT_INTEL = 1;
    GEOLOCATION = 2;
    ASSET_INFO = 3;
    USER_INFO = 4;
    VULNERABILITY = 5;
}

enum EnrichmentStatus {
    ENRICHMENT_STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    PARTIAL = 2;
    FAILED = 3;
    SKIPPED = 4;
}

enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    ASC = 1;
    DESC = 2;
}

enum WindowType {
    WINDOW_TYPE_UNSPECIFIED = 0;
    FIXED = 1;
    SLIDING = 2;
    TUMBLING = 3;
}

enum ErrorCode {
    ERROR_UNSPECIFIED = 0;
    VALIDATION_ERROR = 1;
    PROCESSING_ERROR = 2;
    STORAGE_ERROR = 3;
    ENRICHMENT_ERROR = 4;
    TIMEOUT_ERROR = 5;
}

enum EventStatus {
    EVENT_STATUS_UNSPECIFIED = 0;
    ACCEPTED = 1;
    PROCESSING = 2;
    COMPLETED = 3;
    FAILED = 4;
}